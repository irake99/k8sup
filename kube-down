#!/bin/bash
set -e

function remove_node_from_endpoints(){
  local HYPERKUBE_IMAGE="$1"
  local APISERVER="$2"
  local IPMASK_PATTERN="[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\/[0-9]\{1,2\}"
  local GW_IFACE="$(ip route | grep default | awk '{print $5}')"
  local IPADDR="$(ip addr show dev "${GW_IFACE}" | grep -o "${IPMASK_PATTERN}" | cut -d '/' -f 1)"

  local NEW_ENDPOINTS="$(docker run \
    --net=host \
    --rm=true \
    "${HYPERKUBE_IMAGE}" \
    /hyperkube kubectl -s "${APISERVER}" \
    --insecure-skip-tls-verify \
    --username="admin" \
    --password="admin" \
    get ep kubernetes --namespace=default -o json \
      | jq ".subsets[].addresses[] | select(.ip != \"${IPADDR}\")" \
      | jq -s -c .)"

  [[ "${NEW_ENDPOINTS}" == "[]" ]] && return 0

  local NEW_PATCH="{\"subsets\":[{\"addresses\":${NEW_ENDPOINTS},\"ports\":[{\"name\":\"https\",\"port\":6443,\"protocol\":\"TCP\"}]}]}"

  docker run \
    --net=host \
    --rm=true \
    "${HYPERKUBE_IMAGE}" \
    /hyperkube kubectl -s "${APISERVER}" \
    --insecure-skip-tls-verify \
    --username="admin" \
    --password="admin" \
    patch ep kubernetes \
    --type='merge' \
    -p "${NEW_PATCH}"
}

function get_endpoint_amount(){
  local ETCD_CLIENT_PORT="$1"
  local NODE_LIST="$(curl -m 2 -sf "127.0.0.1:${ETCD_CLIENT_PORT}/v2/keys/registry/services/endpoints/default/kubernetes" \
                     | jq -r '.node.value' \
                     | jq -r '.subsets[].addresses[].ip')"
  [[ -z "${NODE_LIST}" ]] && { echo "Could not connect to etcd server!" 1>&2; return 1; }
  [[ "${NODE_LIST}" == "null" ]] && { echo "No such any endpoint!" 1>&2; return 1; }

  local ENDPOINT_AMOUNT="$(echo "${NODE_LIST}" | wc -l)"
  echo "${ENDPOINT_AMOUNT}"
}

# Find an API server
function find_an_apiserver(){
  local ETCD_CLIENT_PORT="$1"
  local K8S_PORT="$2"
  local K8S_INSECURE_PORT="$3"
  local APISERVER
  local NODE

  if curl --insecure -u admin:admin -m 2 -sf "http://127.0.0.1:${K8S_INSECURE_PORT}" &>/dev/null; then
    APISERVER="http://127.0.0.1:${K8S_INSECURE_PORT}"
  else
    # If API server is not running on local, searching it from other nodes.
    local NODE_LIST="$(curl -m 2 -sf "127.0.0.1:${ETCD_CLIENT_PORT}/v2/keys/registry/services/endpoints/default/kubernetes" \
                       | jq -r '.node.value' \
                       | jq -r '.subsets[].addresses[].ip')"
    [[ -z "${NODE_LIST}" ]] && { echo "Could not connect to etcd server!" 1>&2; return 1; }

    for NODE in ${NODE_LIST}; do
      if curl --insecure -u admin:admin -m 2 -sf "https://${NODE}:${K8S_PORT}" &>/dev/null; then
        APISERVER="https://${NODE}:${K8S_PORT}"
        break
      fi
    done
  fi
  [[ -z "${APISERVER}" ]] && { echo "Could not find any apiserver!" 1>&2; return 1; }

  echo "${APISERVER}"
}

function stop_k8s(){
  local IPADDR="$1"
  local ETCD_CLIENT_PORT="$2"
  local HYPERKUBE_IMAGE="$3"
  local APISERVER="$4"

  # Drain node in preparation for maintenance.
  docker run \
    --net=host \
    --rm=true \
    "${HYPERKUBE_IMAGE}" \
    /hyperkube kubectl -s "${APISERVER}" \
    --insecure-skip-tls-verify \
    --username="admin" \
    --password="admin" \
    drain "${IPADDR}" --force --ignore-daemonsets --delete-local-data

  if [[ "${EXIT}" == "true" ]]; then
    # Exit k8s cluster
    docker run \
      --net=host \
      --rm=true \
      "${HYPERKUBE_IMAGE}" \
      /hyperkube kubectl -s "${APISERVER}" \
      --insecure-skip-tls-verify \
      --username="admin" \
      --password="admin" \
      delete node "${IPADDR}"
  fi

  # Remove k8s system pods conf
  echo '{}' | tee /etc/kubernetes/manifests-multi/master-multi.json &>/dev/null
  echo '{}' | tee /etc/kubernetes/manifests-multi/addon-manager-multinode.json &>/dev/null

  echo -n "Waiting for all k8s pods stopped ..." 1>&2
  until [[ "$(docker ps | grep "${HYPERKUBE_IMAGE}" | wc -l)" -le "2" ]]; do
    echo -n "." 1>&2
    sleep 1
  done
  echo 1>&2

  until ! docker ps | grep -w 'k8sup-kubelet'; do
    docker stop k8sup-kubelet 1>/dev/null || true
    docker rm k8sup-kubelet 1>/dev/null || true
  done
}

function exit_etcd(){
  local IPADDR="$1"
  local ETCD_CLIENT_PORT="$2"
  local LOCAL_ETCD="$3"

  # Exit etcd cluster
  local MEMBER_LIST="$(curl -s http://127.0.0.1:${ETCD_CLIENT_PORT}/v2/members)"
  if [[ "${MEMBER_LIST}" == *"${IPADDR}:${ETCD_CLIENT_PORT}"* ]]; then
    local MEMBER_ID="$(echo "${MEMBER_LIST}" | jq -r ".members[] | select(contains({clientURLs: [\"/${IPADDR}:\"]})) | .id")"
    test "${MEMBER_ID}" && curl -s "http://127.0.0.1:${ETCD_CLIENT_PORT}/v2/members/${MEMBER_ID}" -XDELETE
    if [[ "${LOCAL_ETCD}" == "true" ]]; then
      docker stop k8sup-etcd
      docker rm k8sup-etcd
      rm -rf "/var/lib/etcd/"*
    fi
  fi
}

function show_usage(){
  USAGE="Usage: ${0##*/} [options...]
Options:
-r, --remove                             Exit K8S cluster and remove data
    --stop-k8s-only                      Just stop k8s service without stop etcd service
-f, --force                              Force to kill named k8sup containers
    --exit-local-etcd-only               Exit the local etcd member from cluster
    --exit-remote-etcd=REMOTE_IPADDR     Exit the remote etcd member from cluster
    --debug                              Enable debug mode
-h, --help                               This help text
"

  echo "${USAGE}"
}

function get_options(){
  local PROGNAME="${0##*/}"
  local SHORTOPTS="rfh"
  local LONGOPTS="remove,stop-k8s-only,force,exit-local-etcd-only,exit-remote-etcd:,debug,help"
  local PARSED_OPTIONS=""

  PARSED_OPTIONS="$(getopt -o "${SHORTOPTS}" --long "${LONGOPTS}" -n "${PROGNAME}" -- "$@")" || exit 1
  eval set -- "${PARSED_OPTIONS}"

  # extract options and their arguments into variables.
  while true ; do
      case "$1" in
          -r|--remove)
              export EX_EXIT="true"
              shift
              ;;
             --stop-k8s-only)
              export EX_STOP_K8S_ONLY="true"
              shift
              ;;
          -f|--force)
              export EX_FORCE="true"
              shift
              ;;
             --exit-local-etcd-only)
              export EX_LOCAL_ETCD_ONLY="true"
              shift
              ;;
             --exit-remote-etcd)
              export EX_REMOTE_ETCD="true"
              export EX_REMOTE_IPADDR="$2"
              shift 2
              ;;
             --debug)
              set -x
              export SHELLOPTS
              shift
              ;;
          -h|--help)
              show_usage
              exit 0
              shift
              ;;
          --)
              shift
              break
              ;;
          *)
              echo "Option error!" 1>&2
              echo $1
              exit 1
              ;;
      esac
  done

  if [[ "${EX_REMOTE_ETCD}" == "true" ]] && [[ -z "${EX_REMOTE_IPADDR}" ]]; then
    echo "Need IP address of remote etcd node, exiting..." 1>&2
    exit 1
  fi
}

function main(){
  get_options "$@"
  local EXIT="${EX_EXIT}"

  source "/root/.bashrc"
  local IPADDR="${EX_IPADDR}"
  local ETCD_CLIENT_PORT="${EX_ETCD_CLIENT_PORT}"
  local K8S_VERSION="${EX_K8S_VERSION}"
  local K8S_PORT="${EX_K8S_PORT}"
  local K8S_INSECURE_PORT="${EX_K8S_INSECURE_PORT}"
  local REGISTRY="${EX_REGISTRY}"
  local HYPERKUBE_IMAGE="${EX_HYPERKUBE_IMAGE}"
  local LOCAL_ETCD="true"

  local STOP_K8S_ONLY="${EX_STOP_K8S_ONLY}"
  local EXIT_ETCD_ONLY="${EX_EXIT_ETCD_ONLY}"
  local LOCAL_ETCD_ONLY="${EX_LOCAL_ETCD_ONLY}"
  local REMOTE_ETCD="${EX_REMOTE_ETCD}"
  local REMOTE_IPADDR="${EX_REMOTE_IPADDR}"
  local FORCE="${EX_FORCE}"
  local APISERVER
  local ENDPOINT_AMOUNT
  if [[ "${LOCAL_ETCD_ONLY}" == "true" ]]; then
    exit_etcd "${IPADDR}" "${ETCD_CLIENT_PORT}" "${LOCAL_ETCD}"
    exit 0
  fi
  if [[ "${REMOTE_ETCD}" == "true" ]]; then
    LOCAL_ETCD="false"
    exit_etcd "${REMOTE_IPADDR}" "${ETCD_CLIENT_PORT}" "${LOCAL_ETCD}"
    exit 0
  fi
  if [[ "${FORCE}" == "true" ]]; then
    echo "Trying to kill k8s containers..." 1>&2
    docker stop $(docker ps -a | grep -E "k8sup-kubelet" | awk '{print $1}') 1>/dev/null || true
    docker rm -f -v $(docker ps -a | grep -E "${REGISTRY}/hyperkube|${REGISTRY}/pause|${REGISTRY}/kube-addon-manager" | awk '{print $1}') 1>/dev/null || true
    if [[ "${EXIT}" == "true" ]]; then
      exit_etcd "${IPADDR}" "${ETCD_CLIENT_PORT}" "${LOCAL_ETCD}"
    fi
  else
    # Default removing
    APISERVER="$(find_an_apiserver "${ETCD_CLIENT_PORT}" "${K8S_PORT}" "${K8S_INSECURE_PORT}")" || exit 1
    echo "Stopping k8s containers..." 1>&2
    stop_k8s "${IPADDR}" "${ETCD_CLIENT_PORT}" "${HYPERKUBE_IMAGE}" "${APISERVER}"
    ENDPOINT_AMOUNT="$(get_endpoint_amount "${ETCD_CLIENT_PORT}")" || exit 1
    if [[ "${ENDPOINT_AMOUNT}" -gt "1" ]]; then
      # Try to find another apiserver for removing this node from endpoints
      APISERVER="$(find_an_apiserver "${ETCD_CLIENT_PORT}" "${K8S_PORT}" "${K8S_INSECURE_PORT}")" \
       && remove_node_from_endpoints "${HYPERKUBE_IMAGE}" "${APISERVER}" || true
    fi
    if [[ "${STOP_K8S_ONLY}" == "true" ]]; then
      exit 0
    fi
    if [[ "${EXIT}" == "true" ]]; then
      exit_etcd "${IPADDR}" "${ETCD_CLIENT_PORT}" "${LOCAL_ETCD}"
    fi
  fi

  echo "Stopping k8sup-kubelet, k8sup-etcd, k8sup-flanneld, and k8sup..." 1>&2
  docker stop $(docker ps -a | grep -E "k8s-proxy|k8sup-kubelet|k8sup-flannel|k8sup-etcd" | awk '{print $1}') 1>/dev/null || true
  docker rm -v $(docker ps -a | grep -E "k8s-proxy|k8sup-kubelet|k8sup-flannel|k8sup-etcd" | awk '{print $1}') 1>/dev/null || true

  docker rm -f -v $(docker ps -a | grep "k8sup" | awk '{print $1}') 1>/dev/null
}

main "$@"
